# -*- coding: utf-8 -*-
"""District_level_Evapotranspiration for 10 years.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XSYJodOrcZQbdYr7hmYFPQrEBjVPxOQm
"""

# Install geemap
!pip install geemap

import ee
import geemap
import pandas as pd

# Authenticate and initialize GEE
ee.Authenticate()
ee.Initialize(project='ee-lavibas23')

# Define AOI: Sri Lanka boundary
sri_lanka = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level1") \
                .filter(ee.Filter.eq('ADM0_NAME', 'Sri Lanka')) \
                .geometry()

# Load MODIS ET dataset (8-day composites)
et_collection = ee.ImageCollection("MODIS/061/MOD16A2") \
                    .select("ET") \
                    .filterDate('2015-05-01', '2025-05-01')

# Compute mean ET over 1 year (unit = kg/m²/8 days; scale factor = 0.1)
et_mean = et_collection.mean().multiply(0.1).clip(sri_lanka)  # Units: mm

stats = et_mean.reduceRegion(
    reducer=ee.Reducer.minMax(),
    geometry=sri_lanka,
    scale=500,  # MODIS scale
    maxPixels=1e9
)
print("ET min and max:", stats.getInfo())

# Visualization parameters
et_vis = {
    'min': 15,
    'max': 47,
    'palette': ['ffffff', 'fcd163', '99b718', '66a000', '3e8601', '207401', '056201', '004c00', '011301'],
}

# Load district boundaries (Level 2)
districts = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level2") \
              .filter(ee.Filter.eq('ADM0_NAME', 'Sri Lanka'))

# Reduce mean ET per district
et_stats = et_mean.reduceRegions(
    collection=districts,
    reducer=ee.Reducer.mean(),
    scale=500,
)

# Display map
Map = geemap.Map()
Map.centerObject(sri_lanka, 7)
Map.addLayer(et_mean, et_vis, "Mean Annual ET (2015–2025)")
Map.addLayer(districts.style(color='black', fillColor='00000000', width=1), {}, "District Boundaries")

# Define legend labels and colors matching your palette
labels = ['0', '50', '100', '150', '200', '250', '300']
colors = ['#ffffff', '#fcd163', '#99b718', '#66a000', '#3e8601', '#207401', '#056201']

# Add legend
Map.add_legend(
    title="Mean Annual ET (mm)",
    labels=labels,
    colors=colors,
    position="bottomright"
)

import ipywidgets as widgets
from IPython.display import display

title = widgets.HTML(
    value="<h2 style='text-align:center'>Mean Annual Evapotranspiration (2015–2025) in Sri Lanka</h2>"
)

display(title)

Map.centerObject(sri_lanka, zoom=7)  # You can adjust the zoom level (e.g., 6–8)

# Then display the map as usual
Map

# Print ET values to understand range
et_list = et_stats.aggregate_array('mean').getInfo()
print(sorted(et_list))

def color_features(feature):
    et = ee.Number(feature.get('mean'))
    fill_color = ee.Algorithms.If(et.lt(24.0), '#ffffd9',
                 ee.Algorithms.If(et.lt(26.5), '#a1dab4',
                 ee.Algorithms.If(et.lt(29.0), '#41b6c4',
                 ee.Algorithms.If(et.lt(31.5), '#2c7fb8',
                                   '#253494'))))


    return feature.set('style', {
        'color': '000000',
        'width': 0.5,
        'fillColor': fill_color
    })

styled_fc = et_stats.map(color_features)

Map.addLayer(styled_fc.style(**{'styleProperty': 'style'}), {}, 'ET per District (Choropleth)')

import ipywidgets as widgets
from IPython.display import display

# Title widget
title_html = widgets.HTML("<h3 style='text-align:center'>Evapotranspiration per District (May 2015 – May 2025)</h3>")
display(title_html)


Map.centerObject(sri_lanka, zoom=7)  # You can adjust the zoom level (e.g., 6–8)

legend_dict = {
    '20–24.0 mm': '#ffffd9',
    '24.0–26.5 mm': '#a1dab4',
    '26.5–29.0 mm': '#41b6c4',
    '29.0–31.5 mm': '#2c7fb8',
    '31.5–35.0 mm': '#253494'
}


Map.add_legend(title="Mean Annual ET (mm)", legend_dict=legend_dict)

# Then display the map as usual
Map

precip_collection = ee.ImageCollection("UCSB-CHG/CHIRPS/DAILY") \
    .filterDate('2015-05-01', '2025-05-01') \
    .select("precipitation")

precip_total = precip_collection.sum().clip(sri_lanka)

precip_stats = precip_total.reduceRegions(
    collection=districts,
    reducer=ee.Reducer.mean(),
    scale=5000,
)

#### District-Wise Precipitation and ET Comparison (May 2015 – May 2025)


# Install geopandas if not already installed
!pip install geopandas

import geopandas as gpd
import matplotlib.pyplot as plt
import json

# Convert ET and Precipitation FeatureCollections to GeoJSON
et_geojson = geemap.ee_to_geojson(et_stats)
precip_geojson = geemap.ee_to_geojson(precip_stats)


print(json.dumps(et_geojson['features'][0]['properties'], indent=2))

et_gdf = gpd.GeoDataFrame.from_features(et_geojson['features'])

# If mean is nested:
if isinstance(et_gdf.loc[0, 'mean'], dict):
    et_gdf['ET_mean'] = et_gdf['mean'].apply(lambda x: x.get('mean') if isinstance(x, dict) else x)
else:
    et_gdf['ET_mean'] = et_gdf['mean']

et_gdf = et_gdf[['ADM2_NAME', 'ET_mean']]


# Load into GeoDataFrames

precip_gdf = gpd.GeoDataFrame.from_features(precip_geojson['features'])

# Extract and rename

et_gdf = et_gdf.rename(columns={'mean': 'ET_mean'})

precip_gdf = precip_gdf[['ADM2_NAME', 'mean']]
precip_gdf = precip_gdf.rename(columns={'mean': 'Precip_mean'})

# Merge by district name
merged_df = pd.merge(et_gdf, precip_gdf, on='ADM2_NAME')

# Drop NaNs and calculate ET/P ratio
merged_df = merged_df.dropna()
merged_df['ET_P_ratio'] = merged_df['ET_mean'] / merged_df['Precip_mean']

print(merged_df[['ADM2_NAME', 'ET_mean']])

import matplotlib.pyplot as plt
import numpy as np

districts = merged_df['ADM2_NAME']
et = merged_df['ET_mean'].astype(float)
precip = merged_df['Precip_mean'].astype(float)

x = np.arange(len(districts))
width = 0.4

fig, ax1 = plt.subplots(figsize=(14,6))

color_et = 'tab:green'
ax1.set_xlabel('District')
ax1.set_ylabel('ET (mm)', color=color_et)
bars1 = ax1.bar(x - width/2, et, width=width, label='ET (mm)', color=color_et, alpha=0.8)
ax1.tick_params(axis='y', labelcolor=color_et)
ax1.set_xticks(x)
ax1.set_xticklabels(districts, rotation=90)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color_precip = 'tab:blue'
ax2.set_ylabel('Precipitation (mm)', color=color_precip)
bars2 = ax2.bar(x + width/2, precip, width=width, label='Precipitation (mm)', color=color_precip, alpha=0.6)
ax2.tick_params(axis='y', labelcolor=color_precip)

fig.tight_layout()
plt.title('District-wise ET vs Precipitation (May 2015 – May 2025)')
plt.show()

# Scatter plot: ET vs Precip
!pip install adjustText

from adjustText import adjust_text

plt.figure(figsize=(8, 8))
plt.scatter(merged_df['Precip_mean'], merged_df['ET_mean'], color='teal')

texts = []
for i, row in merged_df.iterrows():
    texts.append(plt.text(row['Precip_mean'], row['ET_mean'], row['ADM2_NAME'], fontsize=7))

adjust_text(texts, arrowprops=dict(arrowstyle='->', color='red'))

plt.xlabel('Mean Precipitation (mm)')
plt.ylabel('Mean ET (mm)')
plt.title('ET vs Precipitation by District')
plt.grid(True)
plt.tight_layout()
plt.show()

# Bar chart: ET/P ratio
plt.figure(figsize=(14, 5))
plt.bar(merged_df['ADM2_NAME'], merged_df['ET_P_ratio'], color='orange')
plt.xticks(rotation=90)
plt.ylabel('ET / Precipitation Ratio')
plt.title('District-wise ET-to-Precipitation Ratio (May 2015 – May 2025)')
plt.tight_layout()
plt.show()

# View full table (optional)
merged_df.sort_values('ET_P_ratio', ascending=False).reset_index(drop=True)